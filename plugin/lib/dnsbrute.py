#!/usr/bin/env python
#-*- coding: UTF-8 -*-

'''
Wiper, an assistant tool for web penetration test.
Copyright (c) 2014-2015 alpha1e0
See the file COPYING for copying detail
'''


from plugin.lib.dnsresolve import DnsResolver
from plugin.lib.dictparse import DictFileEnum

class DnsBrute(object):
    '''
    Use wordlist to bruteforce subdomain.
    input:
        domain: the domain to bruteforce
        dictfiles: the dict files
        bruteTopDomain: wither to check top domain
    '''
    def __init__(self, domain, dictfiles, bruteTopDomain=False):
        self.domain = domain
        dictfiles = dictfiles if dictfiles else ["subdomain_default.txt"]
        self.dictfiles = [os.path.join("data","wordlist","dnsbrute",x) for x in dictfiles]
        self.bruteTopDomain = bruteTopDomain


    def checkDomain(self, domain, dnsresolver):
        ip = dnsresolver.domain2IP(domain)
        if ip:
            return ip


    def __iter__(self):
        return self.brute()


    def brute(self):
        #partDoman示例：aaa.com partDomain为aaa，aaa.com.cn partDomain为aaa
        pos = self.domain.rfind(".com.cn")
        if pos==-1: pos = self.domain.rfind(".")
        partDomain = self.domain if pos==-1 else self.domain[0:pos]

        if self.domain.startswith("www."):
            self.domain = self.domain[pos+4:]

        if self.bruteTopDomain:
            dlist = os.path.join("data","wordlist","toplevel.txt")
            for line in DictFileEnum(dlist):
                domain = partDomain + "." + line
                ip = self.checkDomain(domain, dns)
                if ip:
                    self.put(Host(url=domain, ip=ip, description="Generated by dnsbrute plugin."))

        for dlist in self.dictfiles:
            for line in DictFileEnum(dlist):
                domain = line + "." + self.domain
                ip = self.checkDomain(domain, dns)
                if ip:
                    self.put(Host(url=domain, ip=ip, description="Generated by dnsbrute plugin."))